{"ast":null,"code":"import{combineReducers,createStore}from\"redux\";import{itemsReducer}from\"./items-reducer\";import{reducer as formReducer}from'redux-form';var RootReducer=combineReducers({itemsPage:itemsReducer,form:formReducer});var store=createStore(RootReducer);export default store;","map":{"version":3,"sources":["/Users/v.yakovenko/Desktop/max/my-project/src/Redux/redux-store.tsx"],"names":["combineReducers","createStore","itemsReducer","reducer","formReducer","RootReducer","itemsPage","form","store"],"mappings":"AAAA,OAAQA,eAAR,CAAyBC,WAAzB,KAA2C,OAA3C,CACA,OAAQC,YAAR,KAA2B,iBAA3B,CACA,OAAQC,OAAO,GAAIC,CAAAA,WAAnB,KAAqC,YAArC,CAEA,GAAIC,CAAAA,WAAW,CAAGL,eAAe,CAAC,CAC1BM,SAAS,CAAEJ,YADe,CAE1BK,IAAI,CAAEH,WAFoB,CAAD,CAAjC,CAWA,GAAII,CAAAA,KAAK,CAAGP,WAAW,CAACI,WAAD,CAAvB,CAKA,cAAeG,CAAAA,KAAf","sourcesContent":["import {combineReducers, createStore} from \"redux\";\nimport {itemsReducer} from \"./items-reducer\";\nimport {reducer as formReducer} from 'redux-form'\n\nlet RootReducer = combineReducers({\n        itemsPage: itemsReducer,\n        form: formReducer\n})\n\n\ntype RootReducerType = typeof RootReducer\nexport type AppStateType = ReturnType<RootReducerType>\n\nexport type InferActionsType<T> = T extends {[key: string]: (...arg:any[]) => infer U} ? U : never\n\nlet store = createStore(RootReducer)\n\n\n\n\nexport default store"]},"metadata":{},"sourceType":"module"}